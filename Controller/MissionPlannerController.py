from UAVAUTO_VERSION_4.config import dbfrom UAVAUTO_VERSION_4.Model.MissionPlanner import MissionPlannerfrom UAVAUTO_VERSION_4.Model.MissionStationMapping import MissionStationMappingfrom UAVAUTO_VERSION_4.Model.MissionTask import MissionTaskfrom UAVAUTO_VERSION_4.Model.LocationPin import LocationPinfrom UAVAUTO_VERSION_4.Model.MissionDataLocation import MissionDataLocationfrom UAVAUTO_VERSION_4.Model.MissionDataImage import MissionDataImagefrom UAVAUTO_VERSION_4.Model.Sortie import Sortiefrom UAVAUTO_VERSION_4.Model.Drone import Droneclass MissionPlannerController():    @staticmethod    def insert_mission_plan(data):       mission_plan = MissionPlanner(name=data['name'],admin_id=data['admin_id'],drone_id=data['drone_id'],operator_id=data['operator_id'],start_date=data['start_date'],start_time=data['start_time'],status=data['status'])       db.session.add(mission_plan)       db.session.commit()       mission_station_mapping = MissionStationMapping(mission_planner_id=mission_plan.id, landing_station_id=data['landing_station_id'],departure_station_id=data['departure_station_id'])       db.session.add(mission_station_mapping)       db.session.commit()       return {           "id": mission_plan.id,           "name": mission_plan.name,           "admin_id": mission_plan.admin_id,           "drone_id": mission_plan.drone_id,           "operator_id": mission_plan.operator_id,           "start_date": mission_plan.start_date,           "start_time": str(mission_plan.start_time),           "status": mission_plan.status       }    @staticmethod    def update_mission_plan(data):        mission_plan = MissionPlanner.query.filter_by(id=data.get('mission_planner_id'),validity=1).first()        mission_station_mapping = MissionStationMapping.query.filter_by(mission_planner_id = mission_plan.id,validity=1).first()        if mission_plan and mission_station_mapping:            mission_plan.name = data.get('name',mission_plan.name)            mission_plan.admin_id = data.get('admin_id',mission_plan.admin_id)            mission_plan.drone_id = data.get('drone_id',mission_plan.drone_id)            mission_plan.operator_id = data.get('operator_id',mission_plan.operator_id)            mission_plan.start_date = data.get('start_date',mission_plan.start_date)            mission_plan.start_time = data.get('start_time',mission_plan.admin_id)            mission_plan.status = data.get('status',mission_plan.status)            mission_station_mapping.landing_station = data.get('landing_station',mission_station_mapping.landing_station)            mission_station_mapping.departure_station = data.get('departure_station',mission_station_mapping.departure_station)            db.session.commit()            return True        return False    def delete_mission_plan(mission_planner_id):        # Fetch the main mission plan and related entities in a single query        mission_plan = MissionPlanner.query.filter_by(id=mission_planner_id, validity=1).first()        if not mission_plan:            return False  # Early return if mission plan doesn't exist or is invalid        # Mark mission plan as invalid        mission_plan.validity = 0        # Fetch and invalidate mission station mapping        mission_station_mapping = MissionStationMapping.query.filter_by(mission_planner_id=mission_plan.id,                                                                        validity=1).first()        if mission_station_mapping:            mission_station_mapping.validity = 0        # Fetch all mission tasks related to the mission plan        mission_task = MissionTask.query.filter_by(mission_planner_id=mission_plan.id, validity=1).first()        mission_task.validity = 0  # Invalidate the task        # Fetch and invalidate location pins        location_pins = LocationPin.query.filter_by(mission_task_id=mission_task.id, validity=1).all()        for pin in location_pins:            pin.validity = 0        # Fetch and invalidate mission data locations        mission_data_locations = MissionDataLocation.query.filter_by(mission_task_id=mission_task.id, validity=1).all()        for data_location in mission_data_locations:            data_location.validity = 0            # Fetch and invalidate mission data images            mission_data_images = MissionDataImage.query.filter_by(mission_data_location_id=data_location.id,                                                                   validity=1).all()            for image in mission_data_images:                image.validity = 0        # Commit all changes to the database in one transaction        db.session.commit()        return True    @staticmethod    def get_history():        missions_data = (        db.session.query(            MissionPlanner,            MissionTask,            MissionDataLocation,            MissionDataImage,            Sortie,            Drone        )        .join(MissionTask, MissionTask.mission_planner_id == MissionPlanner.id)        .join(MissionDataLocation, MissionDataLocation.mission_task_id == MissionTask.id)        .join(MissionDataImage, MissionDataImage.mission_data_location_id == MissionDataLocation.id)        .join(Sortie, Sortie.mission_planner_id == MissionPlanner.id)        .join(Drone,MissionPlanner.drone_id==Drone.id)        .filter(MissionPlanner.validity == 1)        .all()        )        for m in missions_data:            print(m)        return [{'id':mission_plan.id,'name':mission_plan.name,                 'admin_id':mission_plan.admin_id,'drone_id':mission_plan.drone_id,                 'operator_id':mission_plan.operator_id,'status':mission_plan.status,                 'mission_task_id':mission_task.id,'description':mission_task.description,                 'latitude':mission_data_location.latitude,'longitude':mission_data_location.longitude,                 'image_path':mission_data_image.image_path,'start_date':sortie.start_date,                 'end_date':sortie.end_date,'start_time':str(sortie.start_time),                 'end_time':str(sortie.end_time),'duration':sortie.duration,                 'drone_name':drone.name} for mission_plan,mission_task,mission_data_location,mission_data_image,sortie,drone in missions_data]